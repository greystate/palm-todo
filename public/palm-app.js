// Generated by CoffeeScript 1.12.0
(function() {
  var $, $$, $on, FixtureBuilder, KEY_RETURN, Task, TodoList, ZireController, randomInteger, randomItem, randomSentence, ref, selectContentEditable,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = function(selector, scope) {
    if (scope == null) {
      scope = document;
    }
    if (typeof selector === "object") {
      return selector;
    } else {
      return scope.querySelector(selector);
    }
  };

  $$ = function(selector, scope) {
    if (scope == null) {
      scope = document;
    }
    return scope.querySelectorAll(selector);
  };

  $on = function(selector, type, handler) {
    return ($(selector)).addEventListener(type, handler, false);
  };

  selectContentEditable = function(contentEditableElement) {
    var range, selection;
    range = document.createRange();
    range.selectNodeContents(contentEditableElement);
    selection = window.getSelection();
    selection.removeAllRanges();
    return selection.addRange(range);
  };

  randomInteger = function(upto) {
    if (upto == null) {
      upto = 10;
    }
    return Math.floor(1 + Math.random() * upto);
  };

  randomItem = function(array) {
    var pick;
    pick = randomInteger(array.length);
    return array[pick - 1];
  };

  randomSentence = function() {
    var CONNECTORS, NOUNS, VERBS, sentence, title;
    VERBS = ["start", "stop", "play", "build", "find", "test", "save"];
    CONNECTORS = ["a", "that", "behind the", "the"];
    NOUNS = ["elephant", "lamp", "cassowary", "table", "mug", "keyboard", "clock tower"];
    title = [randomItem(VERBS), randomItem(CONNECTORS), randomItem(NOUNS)].join(" ");
    title = title.replace(/a e/, "an e");
    return sentence = "" + ((title.charAt(0)).toUpperCase()) + (title.substr(1));
  };

  FixtureBuilder = (function() {
    function FixtureBuilder() {}

    FixtureBuilder.prototype.randomTask = function() {
      return new Task(randomSentence());
    };

    FixtureBuilder.prototype.randomList = function(count) {
      var items, t;
      if (count == null) {
        count = 2;
      }
      items = [];
      t = 1;
      while (t++ <= count) {
        items.push(this.randomTask());
      }
      return items;
    };

    return FixtureBuilder;

  })();

  Task = (function() {
    function Task(title1, priority, category, done) {
      this.title = title1 != null ? title1 : "New Todo";
      this.priority = priority != null ? priority : 1;
      this.category = category != null ? category : TodoList.DEFAULT_CATEGORY;
      this.done = done != null ? done : false;
      this.id = randomInteger(9999);
    }

    Task.prototype.toggle = function() {
      return this.done = !this.done;
    };

    Task.prototype.render = function() {
      var checkbox, element, label;
      element = document.createElement("li");
      element.id = "todo-" + this.id;
      checkbox = document.createElement("input");
      checkbox.setAttribute("type", "checkbox");
      checkbox.className = "priority-" + this.priority;
      checkbox.checked = this.done;
      label = document.createElement("label");
      label.textContent = this.title;
      label.contentEditable = true;
      element.appendChild(checkbox);
      element.appendChild(label);
      return element;
    };

    return Task;

  })();

  window.Task = Task;

  TodoList = (function() {
    TodoList.DEFAULT_CATEGORY = "Unspecified";

    function TodoList(items1) {
      this.items = items1 != null ? items1 : [];
      this.element = null;
    }

    TodoList.prototype.add = function(task) {
      this.items.push(task);
      return this.changed();
    };

    TodoList.prototype.remove = function(index) {
      this.items.splice(index, 1);
      return this.changed();
    };

    TodoList.prototype.changed = function() {
      return this.render();
    };

    TodoList.prototype.render = function(container) {
      var i, item, itemContainer, len, ref;
      if (container == null) {
        container = this.element;
      }
      if (container != null) {
        this.element = container;
        while (container.children.length) {
          container.removeChild(container.children[0]);
        }
      }
      itemContainer = document.createDocumentFragment();
      ref = this.items;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        itemContainer.appendChild(item.render());
      }
      if (container != null) {
        container.appendChild(itemContainer);
      }
      return itemContainer;
    };

    return TodoList;

  })();

  window.TodoList = TodoList;

  this.app = (ref = window.app) != null ? ref : {};

  KEY_RETURN = 13;

  ZireController = (function() {
    function ZireController() {
      this.addNewTask = bind(this.addNewTask, this);
      this.handleKeyup = bind(this.handleKeyup, this);
      this.setupHandlers = bind(this.setupHandlers, this);
      this.builder = new FixtureBuilder;
      this.todos = new TodoList;
      this.todos.items = this.builder.randomList(4);
      this.todos.render($('#todos'));
      this.setupHandlers();
    }

    ZireController.prototype.setupHandlers = function() {
      $on($('#new-task'), "click", this.addNewTask);
      return $on($('body'), "keyup", this.handleKeyup);
    };

    ZireController.prototype.handleKeyup = function(event) {
      if (event.keyCode === KEY_RETURN) {
        if (event.target.nodeName === "BODY" && event.altKey) {
          event.preventDefault();
          return this.addNewTask();
        }
      }
    };

    ZireController.prototype.addNewTask = function() {
      var $label, task;
      task = new Task;
      this.todos.add(task);
      $label = $("#todo-" + task.id + " label");
      return selectContentEditable($label);
    };

    return ZireController;

  })();

  $on(window, "DOMContentLoaded", function() {
    return app.controller = new ZireController;
  });

}).call(this);
